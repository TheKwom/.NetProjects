@page "/tickets"
@inject SyringaHelpDesk.Data.AppDbContext DbContext
@using SyringaHelpDesk.Data
@using Microsoft.EntityFrameworkCore
@rendermode InteractiveServer

<PageTitle>Tickets</PageTitle>

<h1>Tickets</h1>

<div class="mb-3">
    <input type="text" class="form-control mb-2" placeholder="Search by title or description..." 
           @bind="SearchTerm" @bind:event="oninput" />
    
    <select class="form-control" @bind="SelectedStatus">
        <option value="">All Statuses</option>
        @foreach (var status in Enum.GetValues<TicketStatus>())
        {
            <option value="@status.ToString()">@status</option>
        }
    </select>
</div>

@if (filteredTickets == null)
{
    <p><em>Loading...</em></p>
}
else if (!filteredTickets.Any())
{
    <p>No tickets found.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Id</th>
                <th>Title</th>
                <th>Status</th>
                <th>Created</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var ticket in filteredTickets)
            {
                <tr>
                    <td>@ticket.Id</td>
                    <td>@ticket.Title</td>
                    <td>
                        <select @onchange="async e => await UpdateStatus(ticket, e.Value?.ToString() ?? string.Empty)" 
                                value="@ticket.Status.ToString()">
                            @foreach (var status in Enum.GetValues<TicketStatus>())
                            {
                                <option value="@status.ToString()">@status.ToString()</option>
                            }
                        </select>
                    </td>
                    <td>@ticket.CreatedAt.ToLocalTime().ToString("g")</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Ticket>? filteredTickets;

    private string _searchTerm = string.Empty;
    private string SearchTerm
    {
        get => _searchTerm;
        set
        {
            if (_searchTerm != value)
            {
                _searchTerm = value;
                _ = LoadFilteredTickets(); // fire-and-forget
            }
        }
    }

    private string _selectedStatus = string.Empty;
    private string SelectedStatus
    {
        get => _selectedStatus;
        set
        {
            if (_selectedStatus != value)
            {
                _selectedStatus = value;
                _ = LoadFilteredTickets(); // fire-and-forget
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadFilteredTickets();
    }

    private async Task LoadFilteredTickets()
    {
        var query = DbContext.Tickets.AsQueryable();

        if (!string.IsNullOrWhiteSpace(SearchTerm))
        {
            query = query.Where(t =>
                t.Title.Contains(SearchTerm) ||
                t.Description.Contains(SearchTerm));
        }

        if (!string.IsNullOrEmpty(SelectedStatus) &&
            Enum.TryParse<TicketStatus>(SelectedStatus, out var statusEnum))
        {
            query = query.Where(t => t.Status == statusEnum);
        }

        filteredTickets = await query
            .OrderByDescending(t => t.CreatedAt)
            .ToListAsync();

        StateHasChanged();
    }

    private async Task UpdateStatus(Ticket ticket, string? newStatusStr)
    {
        if (Enum.TryParse<TicketStatus>(newStatusStr, out var newStatus) && ticket.Status != newStatus)
        {
            ticket.Status = newStatus;
            DbContext.Tickets.Update(ticket);
            await DbContext.SaveChangesAsync();
            await LoadFilteredTickets(); // Refresh after update
        }
    }
}
